#
print(tmt.norm(24,1,tmtB = 38))
print(tmt.norm(24,1,tmtB = 40))
print(tmt.norm(24,1,tmtB = 41))
print(tmt.norm(24,1,tmtB = 40))
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
print(tmt.norm(24,1,tmtB = 30))
print(tmt.norm(24,1,tmtB = 65))
print(tmt.norm(24,1,tmtB = 36))
print(tmt.norm(24,1,tmtB = 65))
print(tmt.norm(24,1,tmtB = 66))
print(tmt.norm(24,1,tmtB = 65))
print(tmt.norm(24,1,tmtB = 60))
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
print(tmt.norm(24,1,tmtA = 35))
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
A <<- cbind(norm[, c("A10","A20","A30","A40","A50","A60","A70","A80","A90")])
A
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
rm(A)
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
A
which(A > 31)
# print(tmt.norm(24,1,tmtB = 34))
# print(tmt.norm(24,1,tmtB = 35))
#
# print(tmt.norm(24,1,tmtB = 36))
# print(tmt.norm(24,1,tmtB = 37))
# print(tmt.norm(20,1,tmtB = 37))
# #
# print(tmt.norm(24,1,tmtB = 38))
# print(tmt.norm(24,1,tmtB = 40))
#
print(tmt.norm(24,1,tmtB = 16))
print(tmt.norm(24,1,tmtB = 86))
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
print(tmt.norm(24,1,tmtB = 86))
B
score = max(which(B > 80))
score
length(score)
if (score == -Inf) score = 1
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
a = .Inf
a = -Inf
if (a == -Inf) print(a)
if (a == -Inf) print("a")
print(tmt.norm(24,1,tmtB = 86))
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
score = max(which(B > 80))
score
score = max(which(B > 80), na.rm = T)
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
print(tmt.norm(24,1,tmtA = 35))
print(tmt.norm(24,1,tmtB = 34))
print(tmt.norm(24,1,tmtA = 35))
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
print(tmt.norm(24,1,tmtB = 30))
print(tmt.norm(23,1,tmtB = 30))
print(tmt.norm(34,1,tmtB = 33))
print(tmt.norm(34,1,tmtB = 45))
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
norm[1,] = c(24,1,
16,17,19,20,22,23,25,27,31,
35,38,41,44,47,49,54,61,66)
# for age group between 25-34 no categorization based on education is made
norm[2,] = c(34,1,
14,17,19,21,23,25,27,33,40,
33,38,45,48,50,53,58,63,67)
# for age group between 35-44 no categorization based on education is made
norm[3,] = c(44,1,
16,20,23,24,26,28,32,36,46,
40,45,50,53,58,60,62,70,87)
# for age group between 45-54 no categorization based on education is made
norm[4,] = c(54,1,
19,23,27,29,31,33,34,38,50,
42,50,59,62,64,68,72,75,84)
# for age group between 55-59
norm[5,] = c(59,0,
25,27,29,31,32,34,38,40,50,
56,64,66,71,74,81,87,98,105)
norm[6,] = c(59,1,
22,24,25,26,30,32,33,37,53,
42,56,57,61,65,71,74,81,102)
# for age group between 60-64
norm[7,] = c(64,0,
21,24,26,30,33,37,40,43,45,
56,58,62,67,72,75,79,92,96)
norm[8,] = c(64,1,
22,25,26,27,31,33,35,37,43,
45,48,53,59,60,66,71,77,87)
# for age group between 65-69
norm[9,] = c(69,0,
24,30,32,36,39,40,44,47,56,
60,71,74,81,86,93,103,110,137)
norm[10,] = c(69,1,
26,28,30,31,32,34,39,40,45,
52,57,63,67,68,71,73,75,77)
# for age group between 70-74
norm[11,] = c(74,0,
25,30,35,37,38,42,46,52,57,
70,79,83,95,101,112,124,146,172)
norm[12,] = c(74,1,
26,29,31,33,36,41,42,46,71,
59,63,68,80,84,85,103,109,112)
# for age group between 75-79
norm[13,] = c(79,0,
30,37,39,45,50,53,56,61,72,
78,92,96,107,120,140,156,167,189)
norm[14,] = c(79,1,
22,27,34,37,40,43,46,58,66,
57,59,66,73,87,105,126,141,178)
# for age group between 80-74
norm[15,] = c(84,0,
31,39,43,49,53,59,66,78,90,
72,101,112,119,140,154,176,204,259)
norm[16,] = c(84,1,
37,38,41,46,48,56,58,64,101,
89,100,111,113,128,131,139,151,227)
# for age group between 80-74
norm[17,] = c(89,0,
37,39,43,47,55,56,63,72,94,
89,95,112,132,143,188,194,214,317)
norm[18,] = c(89,1,
35,42,49,52,53,60,67,78,125,
70,81,87,90,121,143,156,212,290)
sum(norm)
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
norm[1,] = c(24,1,
16,17,19,20,22,23,25,27,31,
35,38,41,44,47,49,54,61,66)
# for age group between 25-34 no categorization based on education is made
norm[2,] = c(34,1,
14,17,19,21,23,25,27,33,40,
33,38,45,48,50,53,58,63,67)
# for age group between 35-44 no categorization based on education is made
norm[3,] = c(44,1,
16,20,23,24,26,28,32,36,46,
40,45,50,53,58,60,62,70,87)
# for age group between 45-54 no categorization based on education is made
norm[4,] = c(54,1,
19,23,27,29,31,33,34,38,50,
42,50,59,62,64,68,72,75,84)
# for age group between 55-59
norm[5,] = c(59,0,
25,27,29,31,32,34,38,40,50,
56,64,66,71,74,81,87,98,105)
norm[6,] = c(59,1,
22,24,25,26,30,32,33,37,53,
42,56,57,61,65,71,74,81,102)
# for age group between 60-64
norm[7,] = c(64,0,
21,24,26,30,33,37,40,43,45,
56,58,62,67,72,75,79,92,96)
norm[8,] = c(64,1,
22,25,26,27,31,33,35,37,43,
45,48,53,59,60,66,71,77,87)
# for age group between 65-69
norm[9,] = c(69,0,
24,30,32,36,39,40,44,47,56,
60,71,74,81,86,93,103,110,137)
norm[10,] = c(69,1,
26,28,30,31,32,34,39,40,45,
52,57,63,67,68,71,73,75,77)
# for age group between 70-74
norm[11,] = c(74,0,
25,30,35,37,38,42,46,52,57,
70,79,83,95,101,112,124,146,172)
norm[12,] = c(74,1,
26,29,31,33,36,41,42,46,71,
59,63,68,80,84,85,103,109,112)
# for age group between 75-79
norm[13,] = c(79,0,
30,37,39,45,50,53,56,61,72,
78,92,96,107,120,140,156,167,189)
norm[14,] = c(79,1,
22,27,34,37,40,43,46,58,66,
57,59,66,73,87,105,126,141,178)
# for age group between 80-74
norm[15,] = c(84,0,
31,39,43,49,53,59,66,78,90,
72,101,112,119,140,154,176,204,259)
norm[16,] = c(84,1,
37,38,41,46,48,56,58,64,101,
89,100,111,113,128,131,139,151,227)
# for age group between 80-74
norm[17,] = c(89,0,
37,39,43,47,55,56,63,72,94,
89,95,112,132,143,188,194,214,317)
norm[18,] = c(89,1,
35,42,49,52,53,60,67,78,125,
70,81,87,90,121,143,156,212,290)
sum(norm)
source('Z:/Gottingen/Projects/Literature/TMT/tmt.norm.R', encoding = 'UTF-8')
quote = ""
rawdata = "../../../DATA/20180523/"
subjects = read.csv(paste0(rawdata, "Subject.csv"))
df = NULL
csv = c("Outcomes.csv", "Subject.csv", "InjuryHx.csv")
for (i in csv) {
temp = read.csv(paste0(rawdata, i))
if (is.null(df)) {
df = temp
} else {
df = merge(df, temp, by=c("SubjectID"), all.x=TRUE)
}
rm(temp)
}
library(centertbi.data)
set_export_dir()
subjects <-get_subject()
outcome = get_outcomes()
site = get_site()
injury = get_injuryhx()
data = merge(subjects, outcome, by=c("SubjectID"), all.x=TRUE)
data = merge(data, injury, by=c("SubjectID"), all.x=TRUE)
data$HighestPreHospEDGCS <- as.numeric(data$HighestPreHospEDGCS)
data$GCS<-data$HighestPreHospEDGCS
data$GCS[data$HighestPreHospEDGCS > 12 & data$HighestPreHospEDGCS <16]<-"1"
data$GCS[data$HighestPreHospEDGCS > 8 & data$HighestPreHospEDGCS <13]<-"2"
data$GCS[data$HighestPreHospEDGCS > 2 & data$HighestPreHospEDGCS < 9]<-"3"
data$GCS<-as.factor(data$GCS)
levels(data$GCS)<-list("mild" = "1", "moderate" = "2", "severe" = "3")
df = data
colnames = names(df)
colourpicker:::colourPickerAddin()
colourpicker:::colourPickerAddin()
colourpicker:::colourPickerAddin()
shinyjs:::colourPickerAddin()
colourpicker:::colourPickerAddin()
colourpicker:::colourPickerAddin()
colourpicker:::colourPickerAddin()
?yaxt
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
plot(c(0, 1), c(0, 1),
ann = F,
bty = 'n',
type = 'n',
# xaxt = 'n',
yaxt = 'n')
?ATR
library(TTR)
?ATR
?log10
?sum
colourpicker:::colourPickerAddin()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
options(width = 1000)
rawdata = "../../../../DATA/20180523/"
anadata = "../../../../DATA/Anadata/"
codebook= "../../../PCL5/Code/Codebook/"
libraries = c("pander", "Hmisc", "feather")
lapply(libraries, require, character.only = TRUE)
subjects = read.csv(paste0(rawdata, "Subject.csv"))
df = NULL
csv = c("Outcomes.csv", "Subject.csv", "InjuryHx.csv")
for (i in csv) {
temp = read.csv(paste0(rawdata, i))
if (is.null(df)) {
df = temp
} else {
df = merge(df, temp, by=c("SubjectID"), all.x=TRUE)
}
rm(temp)
}
colnames = names(df)
pander(table(df$AssessmentsCompleteStatus))
# df = df[df$AssessmentsCompleteStatus == "COM", ]
# print(dim(df))
# replace the age with corrected age
# ----------------------------------------------------------
index = !is.na(df$AgeCorrected)
df[index, "Age"] = df[index, "AgeCorrected"]
df = df[df$Age >= 16, ]
saveRDS(df, paste0(anadata, "cleandata.rds"))
# keey the 6-months time point
# ----------------------------------------------------------
df = df[df$Timepoint == "6mo", ]
# How many subjects have missing values for **ALL** of the PCL-5 items?
# ----------------------------------------------------------
df2 <- df[!apply(is.na(df[, items_pcl5]), 1, all),]
rawdata = "../../../../DATA/20180523/"
anadata = "../../../../DATA/Anadata/"
codebook= "../../../PCL5/Code/Codebook/"
libraries = c("pander", "Hmisc", "feather")
lapply(libraries, require, character.only = TRUE)
subjects = read.csv(paste0(rawdata, "Subject.csv"))
df = NULL
csv = c("Outcomes.csv", "Subject.csv", "InjuryHx.csv")
for (i in csv) {
temp = read.csv(paste0(rawdata, i))
if (is.null(df)) {
df = temp
} else {
df = merge(df, temp, by=c("SubjectID"), all.x=TRUE)
}
rm(temp)
}
colnames = names(df)
pander(table(df$AssessmentsCompleteStatus))
# df = df[df$AssessmentsCompleteStatus == "COM", ]
# print(dim(df))
# replace the age with corrected age
# ----------------------------------------------------------
index = !is.na(df$AgeCorrected)
df[index, "Age"] = df[index, "AgeCorrected"]
df = df[df$Age >= 16, ]
saveRDS(df, paste0(anadata, "cleandata.rds"))
# keey the 6-months time point
# ----------------------------------------------------------
df = df[df$Timepoint == "6mo", ]
# How many subjects have missing values for **ALL** of the PCL-5 items?
# ----------------------------------------------------------
df2 <- df[!apply(is.na(df[, items_pcl5]), 1, all),]
knitr::opts_chunk$set(echo = TRUE)
options(width = 1000)
rawdata = "../../../../DATA/20180523/"
anadata = "../../../../DATA/Anadata/"
codebook= "../../../PCL5/Code/Codebook/"
libraries = c("pander", "Hmisc", "feather")
lapply(libraries, require, character.only = TRUE)
subjects = read.csv(paste0(rawdata, "Subject.csv"))
df = NULL
csv = c("Outcomes.csv", "Subject.csv", "InjuryHx.csv")
for (i in csv) {
temp = read.csv(paste0(rawdata, i))
if (is.null(df)) {
df = temp
} else {
df = merge(df, temp, by=c("SubjectID"), all.x=TRUE)
}
rm(temp)
}
colnames = names(df)
pander(table(df$AssessmentsCompleteStatus))
# df = df[df$AssessmentsCompleteStatus == "COM", ]
# print(dim(df))
table(df$GAD7TotalScore)
table(df$Timepoint)
collapse1 <- summaryBy(GAD7TotalScore ~ Timepoint, FUN=c(mean,sd), data=df)
collapse1 aggregate(df$GAD7TotalScore,list(df$Timepoint),mean)
collapse1 = aggregate(df$GAD7TotalScore,list(df$Timepoint),mean)
collapse1
collapse1 = aggregate(df$GAD7TotalScore,list(df$Timepoint),mean, na.rm=T)
collapse1
collapse1 = aggregate(df[,c("GAD7TotalScore")],list(df$Timepoint),mean, na.rm=T)
collapse1
collapse1 = aggregate(df[,c("GAD7TotalScore","PCL5TotalScore")],list(df$Timepoint),mean, na.rm=T)
collapse1
collapse1 = aggregate(df[,c("GAD7TotalScore","PCL5TotalScore","PHQ9TotlScre")],list(df$Timepoint),mean, na.rm=T)
collapse1
plot(collapse1$Timepoint, collapse1$GAD7TotalScore, type = "l")
collapse1$Group.1 = as.numeric(c(12,24,.5,3,6,0))
collapse1
collapse1$Group.1 = as.numeric(c(12,24,.5,3,6,0))
collapse1
plot(collapse1$Timepoint, collapse1$GAD7TotalScore, type = "l")
collapse1 = collapse1[1:5, ]
plot(collapse1$Timepoint, collapse1$GAD7TotalScore, type = "l")
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l")
collapse1 = collapse1[order(collapse1$Group.1), ]
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l")
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l")
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
collapse1 = aggregate(df[,c("GAD7TotalScore","PCL5TotalScore","PHQ9TotlScre")],list(df$Timepoint),mean, na.rm=T)
collapse1$Group.1 = as.numeric(c(12,24,.5,3,6,0))
collapse1 = collapse1[1:5, ]
collapse1 = collapse1[order(collapse1$Group.1), ]
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l")
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l")
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = 1:max(collapse1))
max(collapse1)
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(1,10))
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
max(df$GAD7TotalScore)
max(df$GAD7TotalScore, na.rm = T)
max(df$PCL5TotalScore, na.rm = T)
max(df$PHQ9TotlScre, na.rm = T)
SCALE <- scale(df[,c("GAD7TotalScore","PCL5TotalScore","PHQ9TotlScre")])
collapse1 = aggregate(SCALE,list(df$Timepoint),mean, na.rm=T)
collapse1$Group.1 = as.numeric(c(12,24,.5,3,6,0))
collapse1 = collapse1[1:5, ]
collapse1 = collapse1[order(collapse1$Group.1), ]
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-3,3))
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-1,1))
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-.5,.5))
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-.3,.3))
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
table(df$Timepoint)
SCALE <- scale(df[,c("GAD7TotalScore","PCL5TotalScore","PHQ9TotlScre")])
collapse1 = aggregate(SCALE,list(df$Timepoint),mean, na.rm=T)
collapse1$Group.1 = as.numeric(c(12,24,.5,3,6,0))
collapse1 = collapse1[1:5, ]
collapse1 = collapse1[order(collapse1$Group.1), ]
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-.2,.2))
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
table(df$Timepoint)
SCALE <- scale(df[,c("GAD7TotalScore","PCL5TotalScore","PHQ9TotlScre")])
collapse1 = aggregate(SCALE,list(df$Timepoint),mean, na.rm=T)
collapse1$Group.1 = as.numeric(c(12,24,.5,3,6,0))
collapse1 = collapse1[1:5, ]
collapse1 = collapse1[order(collapse1$Group.1), ]
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-.1,.2))
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="orange")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
table(df$Timepoint)
SCALE <- scale(df[,c("GAD7TotalScore","PCL5TotalScore","PHQ9TotlScre")])
collapse1 = aggregate(SCALE,list(df$Timepoint),mean, na.rm=T)
collapse1$Group.1 = as.numeric(c(12,24,.5,3,6,0))
collapse1 = collapse1[1:5, ]
collapse1 = collapse1[order(collapse1$Group.1), ]
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-.1,.2),
col="orange")
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="red")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
SCALE <- scale(df[,c("GAD7TotalScore","PCL5TotalScore","PHQ9TotlScre")])
collapse1 = aggregate(SCALE,list(df$Timepoint),mean, na.rm=T)
collapse1$Group.1 = as.numeric(c(12,24,.5,3,6,0))
collapse1 = collapse1[order(collapse1$Group.1), ]
collapse1
collapse1 = collapse1[3:6, ]
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-.1,.2),
col="orange")
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="red")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue")
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="red",
lty="dash")
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="red",
lty="dashed")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue",
lty="dotted")
table(df$Timepoint)
SCALE <- scale(df[,c("GAD7TotalScore","PCL5TotalScore","PHQ9TotlScre")])
collapse1 = aggregate(SCALE,list(df$Timepoint),mean, na.rm=T)
collapse1$Group.1 = as.numeric(c(12,24,.5,3,6,0))
collapse1 = collapse1[order(collapse1$Group.1), ]
collapse1 = collapse1[3:6, ]
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-.1,.2),
col="orange")
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="red",
lty="dashed")
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue",
lty="dotted")
collapse1
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-.1,.2),
col="orange", lwd=2)
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="red",
lty="dashed", lwd=2)
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue",
lty="dotted", lwd=2)
plot(collapse1$Group.1, collapse1$GAD7TotalScore, type = "l", ylim = c(-.07,.15),
col="orange", lwd=2)
lines(collapse1$Group.1, collapse1$PCL5TotalScore, col="red",
lty="dashed", lwd=2)
lines(collapse1$Group.1, collapse1$PHQ9TotlScre, col="blue",
lty="dotted", lwd=2)
install.packages("Z:/Gottingen/DATA/centertbi.data_0.1.5.tar.gz", repos = NULL, type = "source")
?rnorm
a = rnorm(n=100, mean=170, sd=10)
plot(a)
a = rnorm(n=100, mean=170, sd=2)
plot(a)
a = rnorm(n=100, mean=170, sd=2)
plot(a)
a = rnorm(n=100, mean=170, sd=2)
plot(a)
a = rnorm(n=100, mean=170, sd=2)
plot(a)
a
plot(a[order(a)])
plot(a[order(a)])
a = rnorm(n=100, mean=170, sd=2)
a
plot(density(a))
df = airquality
describe(df)
setwd("~/GitHub/tmt/inst/Apps/Main")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
